import { Seeder } from './seed';
import { User } from '../../user/entities/user.entity';
import * as bcrypt from 'bcrypt';

export class UserSeeder extends Seeder {
  async run(): Promise<void> {
    const userRepository = this.dataSource.getRepository(User);
    const saltRounds = 10;

    const users = [
      {
        email: 'admin@example.com',
        password: 'admin123',
        firstName: 'Admin',
        lastName: 'User',
        isActive: true,
        role: 'guest'
      },
      {
        email: 'user@example.com',
        password: 'user123',
        firstName: 'Regular',
        lastName: 'User',
        isActive: true,
        role: 'guest'
      }
    ];

    for (const userData of users) {
      const existingUser = await userRepository.findOne({
        where: { email: userData.email }
      });

      if (!existingUser) {
        // Hash the password before creating the user
        const hashedPassword = await bcrypt.hash(userData.password, saltRounds);
        const user = userRepository.create({
          ...userData,
          password: hashedPassword
        });
        await userRepository.save(user);
      }
    }
  }
}